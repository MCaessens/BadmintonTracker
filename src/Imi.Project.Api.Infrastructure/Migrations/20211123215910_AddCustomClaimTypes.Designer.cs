// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(BadmintonDbContext))]
    [Migration("20211123215910_AddCustomClaimTypes")]
    partial class AddCustomClaimTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("OpponentScore")
                        .HasColumnType("int");

                    b.Property<Guid?>("RacketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShuttleCockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RacketId");

                    b.HasIndex("ShuttleCockId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Opponent = "Louis Caessens",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Opponent = "Felien Braeckevelt",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Opponent = "Filip Bruyr",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Opponent = "Amber Lippens",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Opponent = "Stefaan Turpyn",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Opponent = "Wesley Caessens",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Opponent = "Louis Caessens",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000007"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Opponent = "Tine Franchois",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000008"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Opponent = "Tine Franchois",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000009"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Opponent = "John Doe",
                            OpponentScore = 0,
                            RacketId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Score = 0,
                            ShuttleCockId = new Guid("00000000-0000-0000-0000-000000000010"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            City = "Eeklo",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000001.jpg",
                            Latitude = 51.18451f,
                            Longitude = 3.57635f,
                            Name = "Sportpark Eeklo",
                            PostalCode = "9900",
                            Street = "Burgemeester Pussemierstraat 3",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            City = "Beerse",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000002.jpg",
                            Latitude = 51.309048f,
                            Longitude = 4.840872f,
                            Name = "Sportcentrum Beerse",
                            PostalCode = "2340",
                            Street = "Rerum Novarumlaan 31",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            City = "Lievegem",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000003.jpg",
                            Latitude = 51.12313f,
                            Longitude = 3.5617187f,
                            Name = "Zwembad Den Boer",
                            PostalCode = "9930",
                            Street = "Den Boer 17",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            City = "Lievegem",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000004.jpg",
                            Latitude = 51.15446f,
                            Longitude = 3.6095564f,
                            Name = "Sportcentrum Waarschoot",
                            PostalCode = "9950",
                            Street = "Kleine Weg 3",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            City = "Brugge",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000005.jpg",
                            Latitude = 51.206585f,
                            Longitude = 3.2418122f,
                            Name = "Sport Vlaanderen Brugge",
                            PostalCode = "8310",
                            Street = "Nijverheidsstraat 112",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            City = "Gent",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000006.jpg",
                            Latitude = 51.03461f,
                            Longitude = 3.703925f,
                            Name = "Sporthal Gent",
                            PostalCode = "9000",
                            Street = "Sint-Denijslaan 251",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            City = "Gent",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000007.jpg",
                            Latitude = 51.003216f,
                            Longitude = 3.7108703f,
                            Name = "Sporthal Hekers",
                            PostalCode = "9052",
                            Street = "Ter Linden 29",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            City = "Aalter",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000008.jpg",
                            Latitude = 51.089367f,
                            Longitude = 3.4387248f,
                            Name = "Sportpark Aalter-centrum",
                            PostalCode = "9880",
                            Street = "Lindestraat 17",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            City = "Oostende",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000009.jpg",
                            Latitude = 51.209965f,
                            Longitude = 2.9246674f,
                            Name = "Mister V-arena",
                            PostalCode = "8400",
                            Street = "Sportparklaan 6",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            City = "Bredene",
                            ImageUrl = "images/locations/00000000-0000-0000-0000-000000000010.jpg",
                            Latitude = 51.237938f,
                            Longitude = 2.9659376f,
                            Name = "Sporthal Ter Polder",
                            PostalCode = "8450",
                            Street = "Spuikomlaan 21",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Racket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RacketType")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rackets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Brand = "Yonex",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000001.jpg",
                            Model = "Voltric DG7 Lime",
                            RacketType = 0,
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Brand = "Yonex",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000002.jpg",
                            Model = "Atrox 2 Blue",
                            RacketType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Brand = "Yonex",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000003.jpg",
                            Model = "Atrox 5 FX",
                            RacketType = 2,
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Brand = "Yonex",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000004.jpg",
                            Model = "Isometric TR-1 White",
                            RacketType = 0,
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Brand = "Yonex",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000005.jpg",
                            Model = "Nanoflare Blue",
                            RacketType = 2,
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Brand = "Yonex",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000006.jpg",
                            Model = "Astrox 55 Light Silver",
                            RacketType = 2,
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Brand = "Perfly",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000007.jpg",
                            Model = "BR700",
                            RacketType = 0,
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Brand = "Adidas",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000008.jpg",
                            Model = "E08.2 Groen",
                            RacketType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Brand = "Idema",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000009.jpg",
                            Model = "Spordas Junior",
                            RacketType = 2,
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Brand = "Victor",
                            ImageUrl = "images/rackets/00000000-0000-0000-0000-000000000010.jpg",
                            Model = "Advanced Junior",
                            RacketType = 2,
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ShuttleCock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ShuttleType")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShuttleCocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Brand = "Perfly",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000001.jpg",
                            Model = "FSC 930",
                            ShuttleType = 0,
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Brand = "Perfly",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000002.jpg",
                            Model = "PSC 100",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Brand = "Perfly",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000003.jpg",
                            Model = "PSC 130",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000004.jpg",
                            Model = "League 7",
                            ShuttleType = 0,
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000005.jpg",
                            Model = "Mavis 350",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000006.jpg",
                            Model = "Aerosensa 30",
                            ShuttleType = 0,
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000007.jpg",
                            Model = "Mavis 200",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000008.jpg",
                            Model = "Mavis 2000",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000009.jpg",
                            Model = "Mavis 600",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Brand = "Yonex",
                            ImageUrl = "images/shuttlecocks/00000000-0000-0000-0000-000000000010.jpg",
                            Model = "Mavis 10",
                            ShuttleType = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountIntegrityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("e0314c59-1db9-4d12-99cb-ad3880a4d250"),
                            ConcurrencyStamp = "97707fa7-a803-4327-9fcd-28eb67d4b13e",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "caessens.marco@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Marco",
                            LastName = "Caessens",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAESSENS.MARCO@GMAIL.COM",
                            NormalizedUserName = "WOLLOW",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFjPdcOC2rFdxmnek9W9ojcPnOU5Oots4k7l2+wNIcR94P518I04/BG/VKcgOwilA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "s2mkkh6qbU",
                            TwoFactorEnabled = false,
                            UserName = "WolloW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("2f568aba-0f69-4939-954d-2c35bf783d7f"),
                            ConcurrencyStamp = "a9bbfad6-e63f-47ca-ba2a-e7154124bb8a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cedric.theys@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cedric",
                            LastName = "Theys",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEDRIC.THEYS@GMAIL.COM",
                            NormalizedUserName = "EATLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAwV6zPEUttXt21sF8ivybuHzKkXys5otI2z84N/B0tc0hVJwV+Xi1l4ah/8J/mFyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "n2E7T6ssNJ",
                            TwoFactorEnabled = false,
                            UserName = "Eatle"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("b113d67d-8cfb-4f73-a318-da6eb2b59a31"),
                            ConcurrencyStamp = "e66d88fa-12ae-49db-80f7-c574a39ab1ab",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hennesley.moerman@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hennesley",
                            LastName = "Moerman",
                            LockoutEnabled = false,
                            NormalizedEmail = "HENNESLEY.MOERMAN@GMAIL.COM",
                            NormalizedUserName = "JUSTALAD",
                            PasswordHash = "AQAAAAEAACcQAAAAECGlWZA7W3K4fa3bYyCO2G5r7mzN2q/qMnZspWMu9uHglHu3DNl4bpw0eT43SDMQ/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "G3rvJEt2r8",
                            TwoFactorEnabled = false,
                            UserName = "JustALad"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("10c93c2c-c3da-4ed9-a633-2b0f3a0d9bfd"),
                            ConcurrencyStamp = "3aecea96-3326-4c48-83b0-fa5a7c2d8d90",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "felien.braeckevelt@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Felien",
                            LastName = "Braeckevelt",
                            LockoutEnabled = false,
                            NormalizedEmail = "FELIEN.BRAECKEVELT@GMAIL.COM",
                            NormalizedUserName = "NOORIE",
                            PasswordHash = "AQAAAAEAACcQAAAAELPyE22FpNc0NC/RXAJp8fxiOU4LqygKBPBwujkozfpoU9pEVJ+AoFmgfO543NaydA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "XasGBe9U74",
                            TwoFactorEnabled = false,
                            UserName = "Noorie"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("ca79c203-9468-4966-b5f7-3d92a44c5758"),
                            ConcurrencyStamp = "0ceaaf78-622e-43c9-8e0a-48e8bd0c09df",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "louis.caessens@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Louis",
                            LastName = "Caessens",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOUIS.CAESSENS@GMAIL.COM",
                            NormalizedUserName = "LUIGI6509",
                            PasswordHash = "AQAAAAEAACcQAAAAECcMZKpVDm0hJ8kD47dyifQaKJdQLU3+b36Zo1mCCnO/KwQzH4D0l21oCOxP+2WVww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fIqpRuE7E",
                            TwoFactorEnabled = false,
                            UserName = "Luigi6509"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("5a939582-5c05-4297-a010-821f0eeb3bb4"),
                            ConcurrencyStamp = "d8eb974b-ce03-492c-b6d4-a41c8656883d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wesley.caessens@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Wesley",
                            LastName = "Caessens",
                            LockoutEnabled = false,
                            NormalizedEmail = "WESLEY.CAESSENS@GMAIL.COM",
                            NormalizedUserName = "COBBLEWOBBLES",
                            PasswordHash = "AQAAAAEAACcQAAAAEEm0eh6tNWXygrzYmbpSO3uVhsATTBfwk5e4PIiY/6+eb3J3szQLNjfmoeBDUR6nLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "L62fp75ope",
                            TwoFactorEnabled = false,
                            UserName = "CobbleWobbles"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("6fb29060-ab74-4b4d-ad7e-7acf28ab9004"),
                            ConcurrencyStamp = "4a7d6d26-8347-4f61-b22c-23c51f2ff886",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pamela.valcke@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pamela",
                            LastName = "Valcke",
                            LockoutEnabled = false,
                            NormalizedEmail = "PAMELA.VALCKE@GMAIL.COM",
                            NormalizedUserName = "PAMKE",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5Zc6zmCqp2G1B/Clnc0Ndfw+G/9XU8lLkFD+RBLOkplIOvyZaeeIW1IrWiOlGf5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d7QUQ6wue",
                            TwoFactorEnabled = false,
                            UserName = "Pamke"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("b3fd51c8-8b03-48f3-bef8-ae64cd74f420"),
                            ConcurrencyStamp = "ff015dd7-6d94-4bb7-b7db-7b02d88850b5",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "spyro.caessens@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Spyro",
                            LastName = "Caessens",
                            LockoutEnabled = false,
                            NormalizedEmail = "SPYRO.CAESSENS@GMAIL.COM",
                            NormalizedUserName = "SPYROENKIE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBCfdWotAedJj3jUVve0nky4zGvQLzr+KWSv2Lr0rbXmXkqYk2jjD87HIXWQAUBJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YnNTPhEWik",
                            TwoFactorEnabled = false,
                            UserName = "Spyroenkie"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("b1625154-9aa3-4bf9-b83a-623e52305965"),
                            ConcurrencyStamp = "e157de5f-8882-4383-ab7e-ecc2e9ccf358",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "helena.bafort@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Valerie",
                            LastName = "Seline",
                            LockoutEnabled = false,
                            NormalizedEmail = "HELENA.BAFORT@GMAIL.COM",
                            NormalizedUserName = "VASELINE",
                            PasswordHash = "AQAAAAEAACcQAAAAECbmIeIvLzhVjU2oUD7gh4P15PiDZx4gOAdFwOFWJY95lqTcpfialwilDDU88obppQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "lMLdnKH1il",
                            TwoFactorEnabled = false,
                            UserName = "VaSeline"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            AccountIntegrityId = new Guid("5a76172e-256d-414e-b8c8-3224dca39259"),
                            ConcurrencyStamp = "f9dcc6ec-1fc6-4fda-b237-38518cacc1a9",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jill.valentijn@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jill",
                            LastName = "Valentijn",
                            LockoutEnabled = false,
                            NormalizedEmail = "JILL.VALENTIJN@GMAIL.COM",
                            NormalizedUserName = "JILLVAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFe+bJ1X0QDoHjChxXZpfnksBZo3RRdRnjNnoR4ljpdmWAsHprRlSvadf06380aBPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3xSn0ECaag",
                            TwoFactorEnabled = false,
                            UserName = "JillVal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "fd98a13f-8523-4702-ba54-036f789449a7",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "bbbdedda-ae07-4932-9d16-4c6098016dfa",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "caessens.marco@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "cedric.theys@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "hennesley.moerman@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "felien.braeckevelt@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "louis.caessens@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "wesley.caessens@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "pamela.valcke@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "spyro.caessens@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "helena.bafort@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "jill.valentijn@gmail.com",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000001",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000002",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000003",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000004",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000005",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000006",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000007",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000008",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000009",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "userId",
                            ClaimValue = "00000000-0000-0000-0000-000000000010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "e0314c59-1db9-4d12-99cb-ad3880a4d250",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "2f568aba-0f69-4939-954d-2c35bf783d7f",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "b113d67d-8cfb-4f73-a318-da6eb2b59a31",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "10c93c2c-c3da-4ed9-a633-2b0f3a0d9bfd",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "ca79c203-9468-4966-b5f7-3d92a44c5758",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "5a939582-5c05-4297-a010-821f0eeb3bb4",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "6fb29060-ab74-4b4d-ad7e-7acf28ab9004",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "b3fd51c8-8b03-48f3-bef8-ae64cd74f420",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "b1625154-9aa3-4bf9-b83a-623e52305965",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "accountIntegrityId",
                            ClaimValue = "5a76172e-256d-414e-b8c8-3224dca39259",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Location", "Location")
                        .WithMany("RelatedGames")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.Racket", "Racket")
                        .WithMany("RelatedGames")
                        .HasForeignKey("RacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.ShuttleCock", "ShuttleCock")
                        .WithMany("RelatedGames")
                        .HasForeignKey("ShuttleCockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Racket", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Rackets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ShuttleCock", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("ShuttleCocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
